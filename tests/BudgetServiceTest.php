<?php /** @noinspection PhpUndefinedNamespaceInspection */

namespace Tests;

use App\Utilities\BudgetRepo;
use Illuminate\Support\Collection;
use Mockery;
use App\Utilities\BudgetService;
use App\Utilities\IBudgetRepo;
use PHPUnit\Framework\TestCase;

class BudgetServiceTest extends TestCase
{
    public $service;
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        //$this->initMockRepo();

        $this->service = new BudgetService();
    }

    /*
     * @test
     */
    public function test_end_less_start_month()
    {
        $result = $this->service->query(new \DateTime('2022-01-01'), new \DateTime('2021-12-12'));
        $this->assertEquals(0, $result);
    }

    /**
     * @test
     */
    public function test_same_month()
    {
        $result = $this->service->query(new \DateTime('2022-01-01'), new \DateTime('2022-01-31'));
        $this->assertEquals(1000, $result);
    }

    /**
     * @test
     */
    public function test_one_month_no_have_all_month()
    {
        $result = $this->service->query(new \DateTime('2022-03-16'), new \DateTime('2022-03-31'));
        $this->assertEquals(1600, $result);
    }

    /**
     * @test
     */
    public function test_two_month()
    {
        $result = $this->service->query(new \DateTime('2022-04-20'), new \DateTime('2022-05-20'));
        $this->assertEquals(2200+1290.32, $result);
    }


    /**
     * @test
     */
    public function test_three_month()
    {
        $result = $this->service->query(new \DateTime('2022-04-16'), new \DateTime('2022-06-20'));
        $this->assertEquals(3000+2000+2000, $result);
    }


    /**
     * @test
     */
    public function test_muli_month_have_no_budget()
    {
        $result = $this->service->query(new \DateTime('2022-04-16'), new \DateTime('2022-06-20'));
        $this->assertEquals(3000+2000+2000, $result);
    }

    public function initMockRepo()
    {
        $data = [];
        $data[] = ['month' => '202201', 'amount' => 6200];
        $data[] = ['month' => '202202', 'amount' => 280];
        $data[] = ['month' => '202203', 'amount' => 3100];
        $data[] = ['month' => '202204', 'amount' => 6000];
        $data[] = ['month' => '202205', 'amount' => 620];
        $data[] = ['month' => '202207', 'amount' => 31];

        $mock = $this->getMockBuilder(IBudgetRepo::class)
            ->disableOriginalConstructor()->setMethods(['getAll'])->getMock();
        $mock->method('getAll')
            ->willReturn(collect($data));

    }
}
